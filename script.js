const examSteps = [
    {
        title: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏Å",
        icon: "üëÄ",
        instructionTitle: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à",
        description: "‡∏¢‡∏∑‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏Å ‡πÅ‡∏Ç‡∏ô‡∏´‡πâ‡∏≠‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°",
        voiceText: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏Å ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏Å ‡πÅ‡∏Ç‡∏ô‡∏´‡πâ‡∏≠‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏° ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πâ‡∏° ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏ö‡∏∏‡πã‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ",
        examples: [
            {
                title: "‚úÖ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥",
                desc: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°",
                type: "normal"
            },
            {
                title: "‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢",
                desc: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πâ‡∏° ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏ö‡∏∏‡πã‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ",
                type: "danger"
            }
        ],
        checks: [
            { text: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏∑‡πà‡∏ô", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏ö‡∏∏‡πã‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏° ‡πÅ‡∏î‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏∑‡πà‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", risk: "medium", riskText: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" }
        ]
    },
    {
        title: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô",
        icon: "üôã‚Äç‚ôÄÔ∏è",
        instructionTitle: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à",
        description: "‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°",
        voiceText: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏ó‡πà‡∏≤‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏° ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏≤‡∏°‡πÅ‡∏Ç‡∏ô ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô",
        examples: [
            {
                title: "‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥",
                desc: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
                type: "normal"
            },
            {
                title: "‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
                desc: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏≤‡∏°‡πÅ‡∏Ç‡∏ô ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô",
                type: "danger"
            }
        ],
        checks: [
            { text: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏≤‡∏°‡πÅ‡∏Ç‡∏ô", risk: "medium", riskText: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" }
        ]
    },
    {
        title: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏•‡∏≥‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏ô",
        icon: "ü§≤",
        instructionTitle: "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≥",
        description: "‡∏ô‡∏≠‡∏ô‡∏£‡∏≤‡∏ö ‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ß‡πâ‡πÉ‡∏ï‡πâ‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡πÉ‡∏ä‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß 3 ‡∏ô‡∏¥‡πâ‡∏ß‡∏Ñ‡∏•‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°",
        voiceText: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏° ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏•‡∏≥‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô‡∏£‡∏≤‡∏ö ‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ß‡πâ‡πÉ‡∏ï‡πâ‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡πÉ‡∏ä‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏™‡∏≤‡∏°‡∏ô‡∏¥‡πâ‡∏ß‡∏Ñ‡∏•‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏° ‡∏Ñ‡∏•‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡∏Å‡∏î‡πÄ‡∏ö‡∏≤ ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡∏á ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà ‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏£‡∏±‡∏Å‡πÅ‡∏£‡πâ ‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡πÑ‡∏´‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡πÑ‡∏´‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏Ñ‡∏∑‡∏≠ ‡∏û‡∏ö‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏∑‡πà‡∏≠",
        examples: [
            {
                title: "üîÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≥",
                desc: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏° ‡∏Ñ‡∏•‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡∏Å‡∏î‡πÄ‡∏ö‡∏≤-‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á-‡πÅ‡∏£‡∏á",
                type: "normal"
            },
            {
                title: "üéØ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à",
                desc: "‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏£‡∏±‡∏Å‡πÅ‡∏£‡πâ ‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡πÑ‡∏´‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡πÑ‡∏´‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤",
                type: "normal"
            },
            {
                title: "‚ö†Ô∏è ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á",
                desc: "‡∏û‡∏ö‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏∑‡πà‡∏≠",
                type: "danger"
            }
        ],
        checks: [
            { text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏∑‡πà‡∏≠", risk: "medium", riskText: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" },
            { text: "‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏£‡∏±‡∏Å‡πÅ‡∏£‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πâ‡∏≠‡∏ô‡∏ö‡∏ß‡∏°", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", risk: "low", riskText: "‡∏ï‡πà‡∏≥" }
        ]
    },
    {
        title: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏±‡∏ß‡∏ô‡∏°",
        icon: "üîç",
        instructionTitle: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à",
        description: "‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡πâ‡∏ß‡∏´‡∏±‡∏ß‡πÅ‡∏°‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ ‡∏ö‡∏µ‡∏ö‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÄ‡∏ö‡∏≤‡πÜ ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏ô‡πÑ‡∏õ‡∏õ‡∏•‡∏≤‡∏¢",
        voiceText: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏¥‡πâ‡∏ß‡∏´‡∏±‡∏ß‡πÅ‡∏°‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ ‡∏ö‡∏µ‡∏ö‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÄ‡∏ö‡∏≤‡πÜ ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏ô‡πÑ‡∏õ‡∏õ‡∏•‡∏≤‡∏¢ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏à‡πá‡∏ö ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏ö ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏£‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∑‡∏≠ ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏™ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÄ‡∏à‡πá‡∏ö ‡πÅ‡∏™‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏ô",
        examples: [
            {
                title: "‚úÖ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥",
                desc: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏à‡πá‡∏ö ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏ö ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏£‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏õ‡∏Å‡∏ï‡∏¥",
                type: "normal"
            },
            {
                title: "‚ö†Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢",
                desc: "‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏™ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏ô‡∏° ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÄ‡∏à‡πá‡∏ö ‡πÅ‡∏™‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏ô",
                type: "danger"
            }
        ],
        checks: [
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏™ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏ô‡∏°", risk: "high", riskText: "‡∏™‡∏π‡∏á" },
            { text: "‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏à‡πá‡∏ö ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏ö ‡πÑ‡∏°‡πà‡∏Ñ‡∏±‡∏ô", risk: "medium", riskText: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" },
            { text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏• ‡∏ï‡∏∏‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∞‡πÄ‡∏Å‡πá‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏ô‡∏°", risk: "medium", riskText: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" }
        ]
    }
];

var currentStep = 0;
var answers = {};
var isVoiceEnabled = true;
var currentSpeech = null;
var speechSupported = false;
var isAudioPlaying = false;
var isInitialized = false;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function checkSpeechSupport() {
    try {
        if ('speechSynthesis' in window) {
            speechSupported = true;
            if (window.speechSynthesis.getVoices().length === 0) {
                window.speechSynthesis.addEventListener('voiceschanged', function() {
                    // do nothing
                });
            }
        } else {
            speechSupported = false;
        }
    } catch (e) {
        speechSupported = false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
function speakTextWithMotionSync(text, callback) {
    if (typeof callback === 'undefined') callback = null;
    if (!isVoiceEnabled || !speechSupported || !window.speechSynthesis) {
        if (callback) callback();
        return;
    }
    try {
        if (window.speechSynthesis.speaking) {
            window.speechSynthesis.cancel();
        }
        setTimeout(function() {
            var utterance = new window.SpeechSynthesisUtterance(text);
            var voices = window.speechSynthesis.getVoices();
            var thaiVoice = null;
            for (var i = 0; i < voices.length; i++) {
                if (voices[i].lang && (voices[i].lang.indexOf('th') !== -1 || voices[i].lang.indexOf('TH') !== -1)) {
                    thaiVoice = voices[i];
                    break;
                }
            }
            if (thaiVoice) {
                utterance.voice = thaiVoice;
            }
            utterance.lang = 'th-TH';
            utterance.rate = 0.8;
            utterance.pitch = 1;
            utterance.volume = 0.9;
            utterance.onstart = function() {
                isAudioPlaying = true;
                updateAudioButton();
                updateVoiceButton();
                startMotionSync();
            };
            utterance.onend = function() {
                isAudioPlaying = false;
                updateAudioButton();
                updateVoiceButton();
                stopMotionSync();
                if (callback) callback();
            };
            utterance.onerror = function(event) {
                isAudioPlaying = false;
                updateAudioButton();
                updateVoiceButton();
                stopMotionSync();
                if (callback) callback();
            };
            currentSpeech = utterance;
            window.speechSynthesis.speak(utterance);
        }, 100);
    } catch (e) {
        if (callback) callback();
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
function playStepAudio() {
    var step = examSteps[currentStep];
    if (step && step.voiceText) {
        if (isAudioPlaying && window.speechSynthesis) {
            window.speechSynthesis.cancel();
            isAudioPlaying = false;
            updateAudioButton();
            stopMotionSync();
        } else {
            speakTextWithMotionSync(step.voiceText);
        }
    }
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function updateAudioButton() {
    const audioBtn = document.querySelector('.play-audio-btn');
    if (audioBtn) {
        const audioText = audioBtn.querySelector('.audio-text');
        const audioWaves = audioBtn.querySelector('.audio-waves');
        const audioIcon = audioBtn.querySelector('.audio-icon');
        
        if (isAudioPlaying) {
            audioBtn.classList.add('playing');
            if (audioText) audioText.textContent = '‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á';
            if (audioWaves) audioWaves.style.display = 'flex';
            if (audioIcon) audioIcon.style.display = 'none';
        } else {
            audioBtn.classList.remove('playing');
            if (audioText) audioText.textContent = '‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥';
            if (audioWaves) audioWaves.style.display = 'none';
            if (audioIcon) audioIcon.style.display = 'inline';
        }
    }
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏Å
function updateVoiceButton() {
    const voiceBtn = document.querySelector('.voice-btn');
    if (voiceBtn) {
        if (isAudioPlaying) {
            voiceBtn.classList.add('speaking');
        } else {
            voiceBtn.classList.remove('speaking');
        }
    }
}

// Motion Sync Functions
function startMotionSync() {
    const motionContainer = document.querySelector('.motion-graphics-container .motion-demo');
    const instructionText = document.querySelector('.instruction-text');
    const voiceOverlay = document.querySelector('.voice-wave-overlay');
    const audioIndicator = document.querySelector('.audio-progress-indicator');
    
    if (motionContainer) {
        motionContainer.classList.add('audio-synced');
        
        if (voiceOverlay) {
            voiceOverlay.classList.add('active');
        }
        
        if (audioIndicator) {
            audioIndicator.classList.add('active');
        }
        
        const audioSyncDemo = new AudioSyncMotionDemo();
        audioSyncDemo.startAudioSyncAnimation(motionContainer, currentStep);
    }
    
    if (instructionText) {
        instructionText.classList.add('voice-speaking');
    }
}

function stopMotionSync() {
    const motionContainer = document.querySelector('.motion-graphics-container .motion-demo');
    const instructionText = document.querySelector('.instruction-text');
    const voiceOverlay = document.querySelector('.voice-wave-overlay');
    const audioIndicator = document.querySelector('.audio-progress-indicator');
    
    if (motionContainer) {
        motionContainer.classList.remove('audio-synced');
        
        if (voiceOverlay) {
            voiceOverlay.classList.remove('active');
        }
        
        if (audioIndicator) {
            audioIndicator.classList.remove('active');
        }
        
        const audioSyncDemo = new AudioSyncMotionDemo();
        audioSyncDemo.stopAudioSyncAnimation(motionContainer);
    }
    
    if (instructionText) {
        instructionText.classList.remove('voice-speaking');
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á ripple effect
function createRipple(event, element) {
    const ripple = document.createElement('div');
    const rect = element.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    ripple.className = 'btn-ripple';
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    
    element.appendChild(ripple);
    
    setTimeout(() => {
        if (ripple.parentNode) {
            ripple.remove();
        }
    }, 600);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
function addButtonEffects() {
    if (isInitialized) return;
    
    document.addEventListener('click', function(e) {
        if (e.target.closest('.animated-button')) {
            createRipple(e, e.target.closest('.animated-button'));
        }
    });
    
    isInitialized = true;
}

// Animation functions
function createFloatingAnimation() {
    const container = document.querySelector('.container');
    if (!container) return;
    
    for (let i = 0; i < 3; i++) {
        const bubble = document.createElement('div');
        bubble.className = 'floating-bubble';
        bubble.style.left = Math.random() * 100 + '%';
        bubble.style.animationDelay = Math.random() * 3 + 's';
        bubble.style.animationDuration = (4 + Math.random() * 2) + 's';
        container.appendChild(bubble);
        
        setTimeout(() => {
            if (bubble.parentNode) {
                bubble.parentNode.removeChild(bubble);
            }
        }, 8000);
    }
}

function animateElements(elements, className, delay = 0) {
    elements.forEach((element, index) => {
        element.classList.remove(className);
        requestAnimationFrame(() => {
            setTimeout(() => {
                element.classList.add(className);
            }, delay + (index * 100));
        });
    });
}

function animateExamples() {
    const exampleItems = document.querySelectorAll('.example-item');
    animateElements(exampleItems, 'animate', 0);
}

function animateCheckItems() {
    const checkItems = document.querySelectorAll('.check-item');
    animateElements(checkItems, 'animate', 200);
}

function animateInstructionBox() {
    const instructionBox = document.querySelector('.instruction-box');
    if (instructionBox) {
        instructionBox.classList.remove('animate');
        requestAnimationFrame(() => {
            instructionBox.classList.add('animate');
        });
    }
}

function animateStepHeader() {
    const stepHeader = document.querySelector('.step-header');
    if (stepHeader) {
        stepHeader.classList.remove('animate');
        requestAnimationFrame(() => {
            stepHeader.classList.add('animate');
        });
    }
}

function animateProgressBar() {
    const progress = document.getElementById('progress');
    if (progress) {
        progress.style.transition = 'width 1s ease-out';
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô debugLog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á log ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
function debugLog(msg) {
    let el = document.getElementById('debug-log');
    if (!el) {
        el = document.createElement('div');
        el.id = 'debug-log';
        el.style.position = 'fixed';
        el.style.bottom = '0';
        el.style.left = '0';
        el.style.width = '100vw';
        el.style.background = 'rgba(0,0,0,0.7)';
        el.style.color = '#fff';
        el.style.zIndex = '9999';
        el.style.fontSize = '12px';
        el.style.padding = '4px 8px';
        el.style.pointerEvents = 'none';
        document.body.appendChild(el);
    }
    el.innerText = msg;
}

function startExam() {
    debugLog('startExam called');
    checkSpeechSupport();
    
    document.getElementById('welcome-screen').classList.remove('active');
    document.getElementById('exam-screen').classList.add('active');
    document.getElementById('total-steps').textContent = examSteps.length;
    answers = {};
    currentStep = 0;
    
    initializeVoiceControls();
    addButtonEffects();
    createFloatingAnimation();
    
    showStep(0);
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á showStep ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ async/await
async function showStep(stepIndex) {
    debugLog('showStep: ' + stepIndex);
    const step = examSteps[stepIndex];
    const progress = ((stepIndex + 1) / examSteps.length) * 100;
    
    if (window.speechSynthesis && window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
        isAudioPlaying = false;
        updateAudioButton();
        stopMotionSync();
    }
    
    animateProgressBar();
    document.getElementById('progress').style.width = progress + '%';
    document.getElementById('current-step').textContent = stepIndex + 1;
    document.getElementById('step-icon').textContent = step.icon;
    document.getElementById('step-title').textContent = step.title;
    document.getElementById('instruction-title').textContent = step.instructionTitle;
    document.getElementById('step-description').textContent = step.description;
    
    animateStepHeader();
    await new Promise(resolve => setTimeout(resolve, 100));
    
    animateInstructionBox();
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const exampleBox = document.getElementById('example-box');
    exampleBox.innerHTML = '<h4>üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</h4>';
    
    const motionContainer = document.createElement('div');
    motionContainer.className = 'motion-graphics-container';
    exampleBox.appendChild(motionContainer);
    
    const audioSyncDemo = new AudioSyncMotionDemo();
    audioSyncDemo.createMotionDemo(stepIndex, motionContainer);
    audioSyncDemo.startAnimation(motionContainer);
    
    step.examples.forEach(example => {
        const exampleItem = document.createElement('div');
        exampleItem.className = 'example-item';
        exampleItem.innerHTML = `
            <div class="example-title ${example.type}-sign">${example.title}</div>
            <div class="example-desc">${example.desc}</div>
        `;
        exampleBox.appendChild(exampleItem);
    });
    
    await new Promise(resolve => setTimeout(resolve, 300));
    animateExamples();
    
    const checklist = document.getElementById('checklist');
    checklist.innerHTML = '';
    
    step.checks.forEach((check, index) => {
        const checkItem = document.createElement('div');
        checkItem.className = 'check-item';
        checkItem.id = `item-${stepIndex}-${index}`;
        
        const currentAnswer = answers[`${stepIndex}-${index}`];
        
        checkItem.innerHTML = `
            <div class="check-question">${check.text}</div>
            <div class="choice-buttons">
                <button class="choice-btn yes ${currentAnswer === 'yes' ? 'selected' : ''}" 
                        data-step="${stepIndex}" data-check="${index}" data-choice="yes">
                    ‚úì ‡πÉ‡∏ä‡πà
                </button>
                <button class="choice-btn no ${currentAnswer === 'no' ? 'selected' : ''}" 
                        data-step="${stepIndex}" data-check="${index}" data-choice="no">
                    ‚úó ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
                </button>
            </div>
            <div class="risk-indicator risk-${check.risk}">
                ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${check.riskText}
            </div>
        `;
        
        if (currentAnswer === 'yes') {
            checkItem.classList.add('answered-yes');
        } else if (currentAnswer === 'no') {
            checkItem.classList.add('answered-no');
        }
        
        checklist.appendChild(checkItem);
    });
    
    await new Promise(resolve => setTimeout(resolve, 400));
    animateCheckItems();
    
    updateButtons();
    setupChoiceButtons();
}

function setupChoiceButtons() {
    const checklist = document.getElementById('checklist');
    if (!checklist) return;
    
    checklist.removeEventListener('click', handleChoiceClick);
    checklist.addEventListener('click', handleChoiceClick);
}

function handleChoiceClick(event) {
    const button = event.target.closest('.choice-btn');
    if (!button) return;
    
    const stepIndex = parseInt(button.dataset.step);
    const checkIndex = parseInt(button.dataset.check);
    const choice = button.dataset.choice;
    
    selectChoice(stepIndex, checkIndex, choice);
}

function initializeVoiceControls() {
    let voiceControls = document.querySelector('.voice-controls');
    
    if (!voiceControls) {
        voiceControls = document.createElement('div');
        voiceControls.className = 'voice-controls';
        voiceControls.innerHTML = `
            <button class="voice-btn" title="‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á">
                <span class="voice-icon">üîä</span>
            </button>
        `;
        document.body.appendChild(voiceControls);
        
        voiceControls.querySelector('.voice-btn').addEventListener('click', toggleVoice);
    }
    
    updateVoiceButtonState();
}

function updateVoiceButtonState() {
    const voiceBtn = document.querySelector('.voice-btn');
    const voiceIcon = document.querySelector('.voice-icon');
    
    if (voiceBtn && voiceIcon) {
        if (!speechSupported || !window.speechSynthesis) {
            voiceBtn.disabled = true;
            voiceBtn.title = '‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á';
            voiceIcon.textContent = 'üö´';
            voiceBtn.classList.add('disabled');
        } else {
            voiceBtn.disabled = false;
            voiceBtn.title = isVoiceEnabled ? '‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á' : '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á';
            voiceIcon.textContent = isVoiceEnabled ? 'üîä' : 'üîá';
            voiceBtn.classList.remove('disabled');
        }
    }
}

function toggleVoice() {
    if (!speechSupported || !window.speechSynthesis) return;
    isVoiceEnabled = !isVoiceEnabled;
    if (!isVoiceEnabled && window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
        isAudioPlaying = false;
        updateAudioButton();
        stopMotionSync();
    }
    updateVoiceButtonState();
    if (isVoiceEnabled) {
        speakTextWithMotionSync("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß");
    }
}

function selectChoice(stepIndex, checkIndex, choice) {
    debugLog('selectChoice: step=' + stepIndex + ', check=' + checkIndex + ', choice=' + choice);
    const answerKey = `${stepIndex}-${checkIndex}`;
    answers[answerKey] = choice;
    
    const checkItem = document.getElementById(`item-${stepIndex}-${checkIndex}`);
    if (!checkItem) return;
    
    const yesBtn = checkItem.querySelector('.choice-btn.yes');
    const noBtn = checkItem.querySelector('.choice-btn.no');
    
    checkItem.classList.remove('answered-yes', 'answered-no');
    yesBtn.classList.remove('selected');
    noBtn.classList.remove('selected');
    
    if (choice === 'yes') {
        yesBtn.classList.add('selected');
        checkItem.classList.add('answered-yes');
    } else {
        noBtn.classList.add('selected');
        checkItem.classList.add('answered-no');
    }
    
    checkItem.style.transform = 'scale(1.02)';
    requestAnimationFrame(() => {
        setTimeout(() => {
            checkItem.style.transform = 'scale(1)';
        }, 200);
    });
}

function nextStep() {
    debugLog('nextStep called, currentStep=' + currentStep);
    if (currentStep < examSteps.length - 1) {
        currentStep++;
        showStep(currentStep);
    } else {
        showResult();
    }
}

function prevStep() {
    debugLog('prevStep called, currentStep=' + currentStep);
    if (currentStep > 0) {
        currentStep--;
        showStep(currentStep);
    }
}

function updateButtons() {
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (prevBtn) prevBtn.disabled = currentStep === 0;
    if (nextBtn) nextBtn.textContent = currentStep === examSteps.length - 1 ? '‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå' : '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ';
}

function showResult() {
    debugLog('showResult called');
    if (window.speechSynthesis && window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
        isAudioPlaying = false;
        stopMotionSync();
    }
    
    document.getElementById('exam-screen').classList.remove('active');
    document.getElementById('result-screen').classList.add('active');
    
    const resultContent = document.getElementById('result-content');
    
    let highRiskCount = 0;
    let mediumRiskCount = 0;
    let lowRiskCount = 0;
    
    Object.keys(answers).forEach(answerKey => {
        if (answers[answerKey] === 'no') {
            const [stepIndex, checkIndex] = answerKey.split('-').map(Number);
            const riskLevel = examSteps[stepIndex].checks[checkIndex].risk;
            
            if (riskLevel === 'high') highRiskCount++;
            else if (riskLevel === 'medium') mediumRiskCount++;
            else lowRiskCount++;
        }
    });
    
    const totalRiskCount = highRiskCount + mediumRiskCount + lowRiskCount;
    
    if (highRiskCount > 0 || totalRiskCount >= 4) {
        resultContent.innerHTML = `
            <div class="result-box risk">
                <h3>üö® ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á</h3>
                <p>‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
                <p><strong>‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:</strong></p>
                <p>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á: ${highRiskCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                <p>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ${mediumRiskCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                <p>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥: ${lowRiskCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                <div class="contact-info">
                    <p><strong>üè• ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ: ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ</strong></p>
                    <p>üìû ‡πÇ‡∏ó‡∏£: 045-317133, 045-317134</p>
                    <p>üìç 405 ‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ç‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ 34000</p>
                    <p>üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 08:00-16:30</p>
                </div>
            </div>
        `;
        
        setTimeout(() => {
            speakTextWithMotionSync("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ");
        }, 500);
        
    } else if (totalRiskCount > 0) {
        resultContent.innerHTML = `
            <div class="result-box warning">
                <h3>‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£</h3>
                <p>‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ${totalRiskCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                <p><strong>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong></p>
                <p>‚Ä¢ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å 1-2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</p>
                <p>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå</p>
                <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥</p>
            </div>
        `;
        
        setTimeout(() => {
            speakTextWithMotionSync("‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ");
        }, 500);
        
    } else {
        resultContent.innerHTML = `
            <div class="result-box safe">
                <h3>‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏Å‡∏ï‡∏¥</h3>
                <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥</p>
                <p><strong>üìÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡πà‡∏≠‡πÑ‡∏õ:</strong></p>
                <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
                <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏±‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏∏‡∏Å 1-3 ‡∏õ‡∏µ (‡∏≠‡∏≤‡∏¢‡∏∏ 20-39 ‡∏õ‡∏µ)</p>
                <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏±‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ (‡∏≠‡∏≤‡∏¢‡∏∏ 40+ ‡∏õ‡∏µ)</p>
                <p>‚Ä¢ Mammogram ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ 40 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ</p>
            </div>
        `;
        
        setTimeout(() => {
            speakTextWithMotionSync("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô");
        }, 500);
    }
    
    const resultBox = document.querySelector('.result-box');
    if (resultBox) {
        resultBox.style.opacity = '0';
        resultBox.style.transform = 'translateY(30px) scale(0.95)';
        requestAnimationFrame(() => {
            setTimeout(() => {
                resultBox.style.transition = 'all 0.6s ease';
                resultBox.style.opacity = '1';
                resultBox.style.transform = 'translateY(0) scale(1)';
            }, 100);
        });
    }
}

function restartExam() {
    if (window.speechSynthesis && window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
        isAudioPlaying = false;
        stopMotionSync();
    }
    
    currentStep = 0;
    answers = {};
    
    const voiceControls = document.querySelector('.voice-controls');
    if (voiceControls) {
        voiceControls.remove();
    }
    
    document.getElementById('result-screen').classList.remove('active');
    document.getElementById('welcome-screen').classList.add('active');
}

function showTips() {
    document.getElementById('result-screen').classList.remove('active');
    document.getElementById('tips-screen').classList.add('active');
}

function backToResult() {
    document.getElementById('tips-screen').classList.remove('active');
    document.getElementById('result-screen').classList.add('active');
}

// Audio-Synchronized Motion Graphics Class
class AudioSyncMotionDemo {
    constructor() {
        this.currentDemo = null;
        this.isPlaying = false;
        this.isAudioSynced = false;
    }

    createMotionDemo(stepIndex, container) {
        container.innerHTML = '';
        
        switch(stepIndex) {
            case 0:
                this.createVisualExamDemo(container);
                break;
            case 1:
                this.createArmRaiseDemo(container);
                break;
            case 2:
                this.createPalpationDemo(container);
                break;
            case 3:
                this.createNippleExamDemo(container);
                break;
        }
    }

    createVisualExamDemo(container) {
        container.innerHTML = `
            <div class="motion-demo">
                <div class="visual-exam-demo">
                    <div class="mirror-frame">
                        <div class="body-silhouette">
                            <div class="breast-area breast-left"></div>
                            <div class="breast-area breast-right"></div>
                            <div class="normal-indicator" style="top: 25px; left: 20px;"></div>
                            <div class="normal-indicator" style="top: 25px; right: 20px;"></div>
                        </div>
                    </div>
                </div>
                <div class="instruction-text">‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°</div>
                <div class="time-comparison">‚è±Ô∏è 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</div>
            </div>
        `;
    }

    createArmRaiseDemo(container) {
        container.innerHTML = `
            <div class="motion-demo">
                <div class="arm-raise-demo">
                    <div class="figure">
                        <div class="figure-head"></div>
                        <div class="figure-body">
                            <div class="breast-area breast-left"></div>
                            <div class="breast-area breast-right"></div>
                        </div>
                        <div class="arm arm-left"></div>
                        <div class="arm arm-right"></div>
                        <div class="normal-indicator" style="top: 70px; left: 25px;"></div>
                        <div class="normal-indicator" style="top: 70px; right: 25px;"></div>
                    </div>
                </div>
                <div class="instruction-text">‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</div>
                <div class="time-comparison">‚è±Ô∏è 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</div>
            </div>
        `;
    }

    createPalpationDemo(container) {
        container.innerHTML = `
            <div class="motion-demo">
                <div class="palpation-demo">
                    <div class="breast-outline">
                        <div class="palpation-hand"></div>
                        <div class="palpation-points point-1"></div>
                        <div class="palpation-points point-2"></div>
                        <div class="palpation-points point-3"></div>
                        <div class="palpation-points point-4"></div>
                        <div class="normal-indicator" style="top: 50%; left: 50%; transform: translate(-50%, -50%);"></div>
                    </div>
                </div>
                <div class="instruction-text">‡∏Ñ‡∏•‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°</div>
                <div class="time-comparison">‚è±Ô∏è 2 ‡∏ô‡∏≤‡∏ó‡∏µ</div>
            </div>
        `;
    }

    createNippleExamDemo(container) {
        container.innerHTML = `
            <div class="motion-demo">
                <div class="nipple-exam-demo">
                    <div class="nipple-area">
                        <div class="nipple-center"></div>
                        <div class="examination-fingers"></div>
                        <div class="normal-indicator" style="top: -10px; right: -10px;"></div>
                    </div>
                </div>
                <div class="instruction-text">‡∏ö‡∏µ‡∏ö‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÄ‡∏ö‡∏≤‡πÜ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏ß</div>
                <div class="time-comparison">‚è±Ô∏è 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</div>
            </div>
        `;
    }

    startAnimation(container) {
        this.isPlaying = true;
        container.classList.add('playing');
    }

    stopAnimation(container) {
        this.isPlaying = false;
        container.classList.remove('playing');
    }

    startAudioSyncAnimation(container, stepIndex) {
        this.isAudioSynced = true;
        container.classList.add('audio-synced');
        
        this.addVoiceWaveOverlay(container);
        this.startSyncedAnimations(container, stepIndex);
        this.addAudioProgressIndicator(container);
    }

    addVoiceWaveOverlay(container) {
        const overlay = document.createElement('div');
        overlay.className = 'voice-wave-overlay';
        
        for (let i = 0; i < 3; i++) {
            const wave = document.createElement('div');
            wave.className = 'voice-wave';
            wave.style.animationDelay = (i * 0.5) + 's';
            overlay.appendChild(wave);
        }
        
        container.appendChild(overlay);
    }

    addAudioProgressIndicator(container) {
        const indicator = document.createElement('div');
        indicator.className = 'audio-progress-indicator';
        indicator.textContent = 'üéôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...';
        container.appendChild(indicator);
    }

    startSyncedAnimations(container, stepIndex) {
        const elements = container.querySelectorAll('.body-silhouette, .breast-area, .arm, .palpation-hand, .palpation-points, .nipple-area, .examination-fingers, .mirror-frame');
        
        elements.forEach(element => {
            if (element.classList.contains('body-silhouette')) {
                element.classList.add('audio-active');
            }
            if (element.classList.contains('breast-area')) {
                element.classList.add('voice-highlight');
            }
            if (element.classList.contains('arm')) {
                element.classList.add('voice-controlled');
            }
            if (element.classList.contains('palpation-hand')) {
                element.classList.add('voice-guided');
            }
            if (element.classList.contains('palpation-points')) {
                element.classList.add('voice-active');
            }
            if (element.classList.contains('nipple-area')) {
                element.classList.add('voice-examining');
            }
            if (element.classList.contains('examination-fingers')) {
                element.classList.add('voice-pressing');
            }
            if (element.classList.contains('mirror-frame')) {
                element.classList.add('voice-active');
            }
        });
    }

    stopAudioSyncAnimation(container) {
        this.isAudioSynced = false;
        container.classList.remove('audio-synced');
        
        const overlay = container.querySelector('.voice-wave-overlay');
        const indicator = container.querySelector('.audio-progress-indicator');
        
        if (overlay) overlay.remove();
        if (indicator) indicator.remove();
        
        const elements = container.querySelectorAll('.audio-active, .voice-highlight, .voice-controlled, .voice-guided, .voice-active, .voice-examining, .voice-pressing');
        elements.forEach(element => {
            element.classList.remove('audio-active', 'voice-highlight', 'voice-controlled', 'voice-guided', 'voice-active', 'voice-examining', 'voice-pressing');
        });
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
document.addEventListener('DOMContentLoaded', function() {
    checkSpeechSupport();
    addButtonEffects();
    console.log('Page loaded, speech support:', speechSupported);
});
